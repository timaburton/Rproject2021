country<-substr(csv_files[i], start=1, stop=8)
z<-cbind(x,dayofYear,country)
result1<-z
results<-rbind(z, x)
} #To deal with NAs#
if(y==1){
results<-na.omit(results)
}else if(y==2){
return(print("Warning: File contains NAs"))
}else if(y==3){
}
write.csv(results, file=name)
}
# Summarize function that takes complied data set and returns summary of number of screens run
# percent of patients screened that were infected, male vs female patients, and the age distribution of patients.
# Supporting function that takes complied data set and returns summary of number of screens run
# percent of patients screened that were infected, male vs female patients, and the age distribution of patients.
summarize<-function(i){
data<-read.table(file=i, header=TRUE, sep=",")
n<-count(data[,])
print("number of screen runs", n)
#number of rows with at least 1 present
#count male vs. female
print("male", "female")
#age
summary(data$age)
}
setwd("C:/Users/tb/Desktop/Biocomputing/Rproject2021/")
##Convert all files into csv files from space/tab delimintated ones##
Convert_csv<-function(dir){
setwd(dir)
path<-list.files(path=dir, pattern=".txt", recursive = TRUE)
for (i in 1:length(path)){
file<-path[i]
out<-paste0(gsub("\\.txt$","",file),".csv")
data<-read.table(file, header= TRUE)
write.csv(data, file=out)
}
}
##Compile all Data into a single csv file##
#Only running for one file? also getting NA for column data
#To Run function compile(directory path, name of wanted file, NA Arguement)
#For NA Arguement, Input 1 if you want to remove NAs, input 2 if you want to just recieve a warning, input 3 if you want to keep them without a warning"
compile<-function(dir, name, y){
setwd(dir)
dayofYear<-"dayofYear"
country<-"country"
csv_files<-list.files(path="~/Desktop/Rproject2021",pattern='*(\\d+).csv', recursive=TRUE, full.names = FALSE)
for(i in 1:length(csv_files)){
x<-read.table(csv_files[i], header = TRUE,sep = ",", stringsAsFactors = FALSE)
x[,dayofYear]<-substr(csv_files[i],start=17, stop=19)
x[,country]<-substr(csv_files[i], start=1, stop=8)
result1<-x
results<-rbind(result1,x)#Error in arguement having different numbers of columns but everything above is working well^
#B/c of error, DayofYear and Country columns are stringing wrong data into the file#
} #To deal with NAs#
if(y==1){
results<-na.omit(results)
}else if(y==2){
return(print("Warning: File contains NAs"))
}else if(y==3){
}
write.csv(results, file=name)
}
# Set working directory
# Function is designed to be used in the same directory as the compiled data set
setwd("C:/Users/tb/Desktop/Biocomputing/Rproject2021/")
summarize <- function(filename){
filename_table <- read.table(filename, sep = ",", stringsAsFactors = TRUE, header = TRUE)
# Summary of number of screens run
total_screens <- nrow(filename_table)
print(paste0("Number of screens run: ",total_screens))
# Percent of patients screened that were infected
infected<-0
for(i in 1:nrow(filename_table)){
if(sum(filename_table[i,3:12])>=1){
infected<-infected+1
}else{
}
}
percent <- (infected/total_screens)*100
print(paste0("Percent of patients screened that were infected: ",round(percent, digits = 2),"%"))
# Male vs female patients
gender<- data.frame(table(filename_table$gender))
colnames(gender)<-c('Gender','Freq')
male<-gender[2,2]
print(paste0("Number of male patients: ",male))
female<-gender[1,2]
print(paste0("Number of female patients: ",female))
# Load plot libraries
library(ggplot2)
library(cowplot)
plot1 <- ggplot(data=gender, aes(x=Gender,y=Freq,fill=Gender))+
geom_bar(stat="identity")+
ylab("Number of Patients")+
ggtitle("Male vs Female")+
scale_fill_manual(values = c('lightblue','darkblue'))+
theme_classic()
# Age distribution
plot2 <- ggplot(data=filename_table,aes(x=age))+
geom_histogram(binwidth = 10, fill="lightblue", color="darkblue")+
ylab("Number of Patients")+
xlab("Age")+
ggtitle("Age Distribution")+
theme_classic()
# Display both summary graphs in console
plot_grid(plot1, plot2, ncol=2, nrow =1, width = 8, height = 5)
}
Convert_csv("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY")
compile("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY", countryY.csv, y = 2)
dir = "C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY"
##Compile all Data into a single csv file##
#Only running for one file? also getting NA for column data
#To Run function compile(directory path, name of wanted file, NA Arguement)
#For NA Arguement, Input 1 if you want to remove NAs, input 2 if you want to just recieve a warning, input 3 if you want to keep them without a warning"
compile<-function(dir, name, y){
setwd(dir)
dayofYear<-"dayofYear"
country<-"country"
csv_files<-list.files(path=dir,pattern='*(\\d+).csv', recursive=TRUE, full.names = FALSE)
for(i in 1:length(csv_files)){
x<-read.table(csv_files[i], header = TRUE,sep = ",", stringsAsFactors = FALSE)
x[,dayofYear]<-substr(csv_files[i],start=17, stop=19)
x[,country]<-substr(csv_files[i], start=1, stop=8)
result1<-x
results<-rbind(result1,x)#Error in arguement having different numbers of columns but everything above is working well^
#B/c of error, DayofYear and Country columns are stringing wrong data into the file#
} #To deal with NAs#
if(y==1){
results<-na.omit(results)
}else if(y==2){
return(print("Warning: File contains NAs"))
}else if(y==3){
}
write.csv(results, file=name)
}
compile("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY", countryY.csv, y = 2)
compile("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY", 'countryY.csv', y = 2)
setwd(dir)
dayofYear<-"dayofYear"
country<-"country"
csv_files<-list.files(path=dir,pattern='*(\\d+).csv', recursive=TRUE, full.names = FALSE)
for(i in 1:length(csv_files)){
x<-read.table(csv_files[i], header = TRUE,sep = ",", stringsAsFactors = FALSE)
x[,dayofYear]<-substr(csv_files[i],start=17, stop=19)
x[,country]<-substr(csv_files[i], start=1, stop=8)
result1<-x
results<-rbind(result1,x)#Error in arguement having different numbers of columns but everything above is working well^
#B/c of error, DayofYear and Country columns are stringing wrong data into the file#
} #To deal with NAs#
##Compile all Data into a single csv file##
#Only running for one file? also getting NA for column data
#To Run function compile(directory path, name of wanted file, NA Arguement)
#For NA Arguement, Input 1 if you want to remove NAs, input 2 if you want to just recieve a warning, input 3 if you want to keep them without a warning"
compile<-function(dir, name, y){
setwd(dir)
dayofYear<-"dayofYear"
country<-"country"
csv_files<-list.files(path=dir,pattern='*(\\d+).csv', recursive=TRUE, full.names = FALSE)
for(i in 1:length(csv_files)){
x<-read.table(csv_files[i], header = TRUE,sep = ",", stringsAsFactors = FALSE)
x[,dayofYear]<-substr(csv_files[i],start=17, stop=19)
x[,country]<-substr(csv_files[i], start=1, stop=8)
if (i == 1){
results = x
} else{
results<-rbind(results,x)
}#Error in arguement having different numbers of columns but everything above is working well^
#B/c of error, DayofYear and Country columns are stringing wrong data into the file#
} #To deal with NAs#
if(y==1){
results<-na.omit(results)
}else if(y==2){
return(print("Warning: File contains NAs"))
}else if(y==3){
}
write.csv(results, file=name)
}
compile("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY", 'countryY.csv', y = 2)
setwd(dir)
dayofYear<-"dayofYear"
country<-"country"
csv_files<-list.files(path=dir,pattern='*(\\d+).csv', recursive=TRUE, full.names = FALSE)
for(i in 1:length(csv_files)){
x<-read.table(csv_files[i], header = TRUE,sep = ",", stringsAsFactors = FALSE)
x[,dayofYear]<-substr(csv_files[i],start=17, stop=19)
x[,country]<-substr(csv_files[i], start=1, stop=8)
if (i == 1){
results = x
} else{
results<-rbind(results,x)
}#Error in arguement having different numbers of columns but everything above is working well^
#B/c of error, DayofYear and Country columns are stringing wrong data into the file#
} #To deal with NAs#
if(y==1){
results<-na.omit(results)
}else if(y==2){
return(print("Warning: File contains NAs"))
}else if(y==3){
}
name = 'countryY.csv'
write.csv(results, file=name)
# Set working directory and load data and ggplot library
setwd("C:/Users/tb/Desktop/Biocomputing/Rproject2021/")
Convert_csv("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY") #convert the .txt files in countryY to .csv
compile("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY", 'countryY.csv', y = 2) #compile each country files
compile("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryX", 'countryX.csv', y = 2)
# Set working directory and load data and ggplot library
setwd("C:/Users/tb/Desktop/Biocomputing/Rproject2021/")
source("supportingFunctions.R") #load supporting functions
Convert_csv("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY") #convert the .txt files in countryY to .csv
compile("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY", 'countryY.csv', y = 2) #compile each country files
compile("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryX", 'countryX.csv', y = 2)
source("C:/Users/tb/Desktop/Biocomputing/Rproject2021/supportingFunctions.R")
# Set working directory and load data and ggplot library
setwd("C:/Users/tb/Desktop/Biocomputing/Rproject2021/")
source("supportingFunctions.R") #load supporting functions
Convert_csv("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY") #convert the .txt files in countryY to .csv
compile("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY", 'countryY.csv', y = 2) #compile each country files
compile("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryX", 'countryX.csv', y = 2)
setwd("C:/Users/tb/Desktop/Biocomputing/Rproject2021/")
x = read.csv('countryX/countryX.csv', header = T)
# Set working directory and load data and ggplot library
setwd("C:/Users/tb/Desktop/Biocomputing/Rproject2021/")
source("supportingFunctions.R") #load supporting functions
Convert_csv("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY") #convert the .txt files in countryY to .csv
compile("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY", 'countryY.csv', y = 2) #compile each country files
compile("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryX", 'countryX.csv', y = 2)
setwd("C:/Users/tb/Desktop/Biocomputing/Rproject2021/")
x = read.csv('countryX/countryX.csv', header = T)
y = read.csv('countryY/countryY.csv', header = T)
allData <- rbind(x,y)
setwd(dir)
dir = "C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY/"
setwd(dir)
dayofYear<-"dayofYear"
country<-"country"
csv_files<-list.files(path=dir,pattern='*(\\d+).csv', recursive=TRUE, full.names = FALSE)
compile("C:/Users/tb/Desktop/Biocomputing/Rproject2021/", 'allData.csv', y = 2)
source("C:/Users/tb/Desktop/Biocomputing/Rproject2021/supportingFunctions.R")
# Set working directory and load data and ggplot library
setwd("C:/Users/tb/Desktop/Biocomputing/Rproject2021/")
source("supportingFunctions.R") #load supporting functions
Convert_csv("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY") #convert the .txt files in countryY to .csv
compile("C:/Users/tb/Desktop/Biocomputing/Rproject2021/", 'allData.csv', y = 2)
dir = "C:/Users/tb/Desktop/Biocomputing/Rproject2021/"
setwd(dir)
dayofYear<-"dayofYear"
country<-"country"
csv_files<-list.files(path=dir,pattern='*(\\d+).csv', recursive=TRUE, full.names = FALSE)
for(i in 1:length(csv_files)){
x<-read.table(csv_files[i], header = TRUE,sep = ",", stringsAsFactors = FALSE)
x[,dayofYear]<-substr(csv_files[i],start=17, stop=19)
x[,country]<-substr(csv_files[i], start=1, stop=8)
if (i == 1){ # this if/else statment is needed to properly set up the results table in the first
results = x # run through the loop, and then append each new table to the growing results table
} else{ #for the rest of the runs through the loop
results<-rbind(results,x)
}#Error in arguement having different numbers of columns but everything above is working well^
#B/c of error, DayofYear and Country columns are stringing wrong data into the file#
} #To deal with NAs#
##Convert all files into csv files from space/tab delimintated ones##
Convert_csv<-function(dir){
setwd(dir)
path<-list.files(path=dir, pattern=".txt", recursive = TRUE)
for (i in 1:length(path)){
file<-path[i]
out<-paste0(gsub("\\.txt$","",file),".csv")
data<-read.table(file, header= TRUE)
write.csv(data, file=out, row.names = F) # it was adding row names, which caused later functions to fail because of different numbers of columns
}
}
source("C:/Users/tb/Desktop/Biocomputing/Rproject2021/supportingFunctions.R")
# Set working directory and load data and ggplot library
setwd("C:/Users/tb/Desktop/Biocomputing/Rproject2021/")
source("supportingFunctions.R") #load supporting functions
Convert_csv("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY") #convert the .txt files in countryY to .csv
compile("C:/Users/tb/Desktop/Biocomputing/Rproject2021/", 'allData.csv', y = 2)
allData <- read.csv('allData.csv', header = T)
# Set working directory and load data and ggplot library
setwd("C:/Users/tb/Desktop/Biocomputing/Rproject2021/")
source("supportingFunctions.R") #load supporting functions
Convert_csv("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY") #convert the .txt files in countryY to .csv
compile("C:/Users/tb/Desktop/Biocomputing/Rproject2021/", 'allData.csv', y = 2)
allData <- read.csv('allData.csv', header = T)
library(ggplot2)
# For loop to determine positive infection cases
positive <- NA
for(i in 1:nrow(allData)){
if(sum(allData[i,3:12])>=1){
positive[(i+1)]<-1
}else{
positive[(i+1)]<-0
}
}
# Vector with value of 1 for infection, value of 0 indicated not infected
# Deletes initial NA value so that length of vector matches number of screens
positive <- positive[2:length(positive)]
# Add new column to dataframe with the infection data
allData <- cbind(allData, new_col = positive)
# Graphs number of positive cases by day of year, splits by country
plot1 <- ggplot(data = allData, aes(x = dayofYear, y = new_col, fill=country))+
geom_bar(stat='identity')+
facet_grid(.~country)+
ylab("Positive Cases")+
xlab("Day of Year")+
theme_classic()
print(plot1)
print("Based on this figure, it is likely that the disease outbreak began in country X, and then spread to country Y. During the earliest days of screening, there were a greater number of positive cases for country X than country Y. Positive cases do not show up in country Y until about 20 days after country X. Therefore, the disease started in country X.")
# Install packages and load library
install.packages("reshape")
library(reshape)
# Convert subset of data from wide format to long format so that it can be graphed
data <- allData[,3:13]
data_long <- melt(data, id.vars = c('country'))
data_long <- melt(allData, id.vars = c('country'))
# Graphs positive infections for each marker and splits by country
plot2 <- ggplot(data = data_long, aes(x=variable, y=value, fill = variable))+
geom_bar(stat='identity')+
facet_grid(.~country)+
theme_classic()+
ylab("Number of Patients")+
xlab("Marker")+
theme(axis.text.x = element_text(angle=90))+
theme(legend.position = "none")
print(plot2)
# Convert subset of data from wide format to long format so that it can be graphed
data <- allData[,3:14]
data_long <- melt(data, id.vars = c('country'))
# Graphs positive infections for each marker and splits by country
plot2 <- ggplot(data = data_long, aes(x=variable, y=value, fill = variable))+
geom_bar(stat='identity')+
facet_grid(.~country)+
theme_classic()+
ylab("Number of Patients")+
xlab("Marker")+
theme(axis.text.x = element_text(angle=90))+
theme(legend.position = "none")
print(plot2)
# Convert subset of data from wide format to long format so that it can be graphed
data <- allData[,3:12, 14]
data_long <- melt(data, id.vars = c('country'))
# Graphs positive infections for each marker and splits by country
plot2 <- ggplot(data = data_long, aes(x=variable, y=value, fill = variable))+
geom_bar(stat='identity')+
facet_grid(.~country)+
theme_classic()+
ylab("Number of Patients")+
xlab("Marker")+
theme(axis.text.x = element_text(angle=90))+
theme(legend.position = "none")
print(plot2)
# Convert subset of data from wide format to long format so that it can be graphed
data <- allData[,c(3:12, 14)]
data_long <- melt(data, id.vars = c('country'))
# Graphs positive infections for each marker and splits by country
plot2 <- ggplot(data = data_long, aes(x=variable, y=value, fill = variable))+
geom_bar(stat='identity')+
facet_grid(.~country)+
theme_classic()+
ylab("Number of Patients")+
xlab("Marker")+
theme(axis.text.x = element_text(angle=90))+
theme(legend.position = "none")
print(plot2)
summarize(allData)
summarize('allData.csv')
source("C:/Users/tb/Desktop/Biocomputing/Rproject2021/supportingFunctions.R")
#### Analysis File ####
#source all the functions from supportingFunctions.
source(file="supportingFunctions.R")
#### Analysis File ####
#source all the functions from supportingFunctions.
source(file="supportingFunctions.R")
source("C:/Users/tb/Desktop/Biocomputing/Rproject2021/supportingFunctions.R")
#### Analysis File ####
#source all the functions from supportingFunctions.
source(file="supportingFunctions.R")
#### Analysis File ####
#source all the functions from supportingFunctions.
source(file="supportingFunctions.R")
alldata <- compileX(directory)
directory = "C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryX"
alldata <- compileX(directory)
alldata <- compileX("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryX")
alldata <- rbind(alldata, compileY("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY"))
convert_to_csv("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY")
source("C:/Users/tb/Desktop/Biocomputing/Rproject2021/supportingFunctions.R")
convert_to_csv("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY")
alldata <- rbind(alldata, compileY("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY"))
#This is the number of screens ran
num_screens(directory)
#This the percent of patients infected
percent(directory)
#This is the number of screens ran
num_screens("C:/Users/tb/Desktop/Biocomputing/Rproject2021/")
#This is the number of screens ran
num_screens("C:/Users/tb/Desktop/Biocomputing/Rproject2021/") #this should point to a single file, not a directory
#This the percent of patients infected
percent("C:/Users/tb/Desktop/Biocomputing/Rproject2021/") #this should point to a single file, not a directory
male_versus_female("C:/Users/tb/Desktop/Biocomputing/Rproject2021/") #this should point to a single file, not a directory
#This is the number of screens ran
num_screens(directory) #this should point to a single file, not a directory
#This the percent of patients infected
percent(directory) #this should point to a single file, not a directory
male_versus_female(directory) #this should point to a single file, not a directory
directory = "C:/Users/tb/Desktop/Biocomputing/Rproject2021/"
#This is the number of screens ran
num_screens(directory) #this should point to a single file, not a directory
#This the percent of patients infected
percent(directory) #this should point to a single file, not a directory
male_versus_female(directory) #this should point to a single file, not a directory
ggplot(data=alldata, aes(x=gender)) + geom_bar() + theme_classic()
male_versus_female(directory) #this should point to a single file, not a directory
source("C:/Users/tb/Desktop/Biocomputing/Rproject2021/supportingFunctions.R")
#### Analysis File ####
#source all the functions from supportingFunctions.
source(file="supportingFunctions.R")
#### Analysis File ####
#source all the functions from supportingFunctions.
directory = "C:/Users/tb/Desktop/Biocomputing/Rproject2021/"
setwd(directory)
source(file="supportingFunctions.R")
alldata <- compileX("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryX")
convert_to_csv("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY")
alldata <- rbind(alldata, compileY("C:/Users/tb/Desktop/Biocomputing/Rproject2021/countryY"))
#This is the number of screens ran
num_screens(directory) #this should point to a single file, not a directory
#This the percent of patients infected
percent(directory) #this should point to a single file, not a directory
male_versus_female(directory) #this should point to a single file, not a directory
number_of_males <- nrow(alldata[alldata$gender=="male",])
number_of_females <- nrow(alldata[alldata$gender=="female",])
#This is the number of males who were patients
number_of_males
#This is the number of females who were patients
number_of_females
ages(directory) #this should point to a single file, not a directory
### 1.In which country (X or Y) did the disease outbreak likely begin?
############ whichever has more infections on the first day
infectedX <- 0
for(row in 1:length(alldata)){
if((alldata$marker01[row]=="1") && (alldata$country=="X") && (alldata$dayofYear=="120")){
infectedX <- infectedX  + 1
}else if((alldata$marker02[row]=="1") && (alldata$country=="X") && (alldata$dayofYear=="120")){
infectedX <- infectedX  + 1
}else if((alldata$marker03[row]=="1") && (alldata$country=="X") && (alldata$dayofYear=="120")){
infectedX  <- infectedX  + 1
}else if((alldata$marker04[row]=="1") && (alldata$country=="X") && (alldata$dayofYear=="120")){
infectedX  <- infectedX  + 1
}else if((alldata$marker05[row]=="1") && (alldata$country=="X") && (alldata$dayofYear=="120")){
infectedX  <- infectedX  + 1
}else if((alldata$marker06[row]=="1") && (alldata$country=="X") && (alldata$dayofYear=="120")){
infectedX  <- infectedX  + 1
}else if((alldata$marker07[row]=="1") && (alldata$country=="X") && (alldata$dayofYear=="120")){
infectedX <- infectedX + 1
}else if((alldata$marker08[row]=="1") && (alldata$country=="X") && (alldata$dayofYear=="120")){
infectedX <- infectedX + 1
}else if((alldata$marker09[row]=="1") && (alldata$country=="X") && (alldata$dayofYear=="120")){
infectedX <- infectedX + 1
}else if((alldata$marker10[row]=="1") && (alldata$country=="X") && (alldata$dayofYear=="120")){
infectedX <- infectedX + 1
}
}
infectedY <- 0
for(row in 1:length(alldata)){
if((alldata$marker01[row]=="1") && (alldata$country=="Y") && (alldata$dayofYear=="120")){
infectedY <- infectedY  + 1
}else if((alldata$marker02[row]=="1") && (alldata$country=="Y") && (alldata$dayofYear=="120")){
infectedY <- infectedY  + 1
}else if((alldata$marker03[row]=="1") && (alldata$country=="Y") && (alldata$dayofYear=="120")){
infectedY  <- infectedY  + 1
}else if((alldata$marker04[row]=="1") && (alldata$country=="Y") && (alldata$dayofYear=="120")){
infectedY  <- infectedY  + 1
}else if((alldata$marker05[row]=="1") && (alldata$country=="Y") && (alldata$dayofYear=="120")){
infectedY  <- infectedY  + 1
}else if((alldata$marker06[row]=="1") && (alldata$country=="Y") && (alldata$dayofYear=="120")){
infectedY  <- infectedY  + 1
}else if((alldata$marker07[row]=="1") && (alldata$country=="Y") && (alldata$dayofYear=="120")){
infectedY <- infectedY + 1
}else if((alldata$marker08[row]=="1") && (alldata$country=="Y") && (alldata$dayofYear=="120")){
infectedY <- infectedY + 1
}else if((alldata$marker09[row]=="1") && (alldata$country=="Y") && (alldata$dayofYear=="120")){
infectedY <- infectedY + 1
}else if((alldata$marker10[row]=="1") && (alldata$country=="Y") && (alldata$dayofYear=="120")){
infectedY <- infectedY + 1
}
}
#This the number of infected people on the first day in country X
infectedX
#This the number of infected people on the first day in country Y
infectedY
dataX175 <- subset(alldata, dayofYear=="175" & country=="X")
dataY175 <- subset(alldata, dayofYear=="175" & country=="Y")
dfX <- data.frame (marker = 1:10, markerSum = c(sum(dataX175$marker01),sum(dataX175$marker02),sum(dataX175$marker03),sum(dataX175$marker04),sum(dataX175$marker05),sum(dataX175$marker06),sum(dataX175$marker07),sum(dataX175$marker08),sum(dataX175$marker09),sum(dataX175$marker10)))
dfY <- data.frame (marker = 1:10, markerSum = c(sum(dataY175$marker01),sum(dataY175$marker02),sum(dataY175$marker03),sum(dataY175$marker04),sum(dataY175$marker05),sum(dataY175$marker06),sum(dataY175$marker07),sum(dataY175$marker08),sum(dataY175$marker09),sum(dataY175$marker10)))
library(ggplot2)
ggplot(data = dfY, aes(x=marker, y=markerSum)) +
geom_bar(stat="identity")
ggplot(data = dfX, aes(x=marker, y=markerSum)) +
geom_bar(stat="identity")
length(alldata)
row = 1
alldata$marker02[row]
View(alldata)
rowsum(alldata[alldata$dayofYear == "120" & alldata$country == "X", 3:12])
rowsum(alldata[alldata$dayofYear == "120", 3:12], group = country)
rowsum(alldata[alldata$dayofYear == "120", 3:12], group = alldata$country)
sum(alldata[alldata$dayofYear == "120", 3:12])
sum(alldata[alldata$dayofYear == "120", alldata$country == "X", 3:12])
sum(alldata[alldata$dayofYear == "120" & alldata$country == "X", 3:12])
sum(alldata[alldata$dayofYear == "120" & alldata$country == "Y", 3:12])
